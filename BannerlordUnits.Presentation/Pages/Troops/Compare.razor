@page "/Troops/Compare"
@attribute [AllowAnonymous]
@inject HttpClient HttpClient
@inject IAccessTokenProvider AccessTokenProvider
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudStack Row="true" Justify="Justify.SpaceAround" AlignItems="AlignItems.Center" Spacing="25">
    <MudCard Style="width: 400px" Elevation="20">
        <MudCardHeader>
            <MudAutocomplete T="Troop" Label="Troop name" @bind-Value="_troop1"
                             SearchFunc="@Search" ToStringFunc="@(e => e?.Name)"
                             ShowProgressIndicator="true"/>
        </MudCardHeader>
        <MudCardMedia Image="@_troop1.ImageUrl" Height="700" Class="w-100"/>
        <MudCardContent>
            <MudText Typo="Typo.body1">Tier: @_troop1.Tier</MudText>
            <MudText Typo="Typo.body1">Type: @_troop1.Type</MudText>
            <MudText Typo="Typo.body1">Culture: @_troop1.Culture</MudText>
            <MudText Typo="Typo.body1">Wage: @_troop1.Wage</MudText>
        </MudCardContent>
    </MudCard>
    <MudStack>
        <MudText Typo="Typo.subtitle1">One Handed @_troop1.OneHanded</MudText>
        <MudText Typo="Typo.subtitle1">Two Handed @_troop1.TwoHanded</MudText>
        <MudText Typo="Typo.subtitle1">Polearm @_troop1.Polearm</MudText>
        <MudText Typo="Typo.subtitle1">Bow @_troop1.Bow</MudText>
        <MudText Typo="Typo.subtitle1">Crossbow @_troop1.Crossbow</MudText>
        <MudText Typo="Typo.subtitle1">Throwing @_troop1.Throwing</MudText>
        <MudText Typo="Typo.subtitle1">Riding @_troop1.Riding</MudText>
        <MudText Typo="Typo.subtitle1">Athletics @_troop1.Athletics</MudText>
    </MudStack>
    <MudStack>
        @CalculateDifference(_troop1.OneHanded, _troop2.OneHanded)
        @CalculateDifference(_troop1.TwoHanded, _troop2.TwoHanded)
        @CalculateDifference(_troop1.Polearm, _troop2.Polearm)
        @CalculateDifference(_troop1.Bow, _troop2.Bow)
        @CalculateDifference(_troop1.Crossbow, _troop2.Crossbow)
        @CalculateDifference(_troop1.Throwing, _troop2.Throwing)
        @CalculateDifference(_troop1.Riding, _troop2.Riding)
        @CalculateDifference(_troop1.Athletics, _troop2.Athletics)
    </MudStack>

    <MudStack>
        <MudText Typo="Typo.subtitle1">@_troop2.OneHanded One Handed</MudText>
        <MudText Typo="Typo.subtitle1">@_troop2.TwoHanded Two Handed</MudText>
        <MudText Typo="Typo.subtitle1">@_troop2.Polearm Polearm</MudText>
        <MudText Typo="Typo.subtitle1">@_troop2.Bow Bow</MudText>
        <MudText Typo="Typo.subtitle1">@_troop2.Crossbow Crossbow</MudText>
        <MudText Typo="Typo.subtitle1">@_troop2.Throwing Throwing</MudText>
        <MudText Typo="Typo.subtitle1">@_troop2.Riding Riding</MudText>
        <MudText Typo="Typo.subtitle1">@_troop2.Athletics Athletics</MudText>
    </MudStack>
    <MudCard Style="width: 400px" Elevation="20">
        <MudCardHeader>
            <MudAutocomplete T="Troop" Label="Troop name" @bind-Value="_troop2"
                             SearchFunc="@Search" ToStringFunc="@(e => e?.Name)"
                             ShowProgressIndicator="true"/>
        </MudCardHeader>
        <MudCardMedia Image="@_troop2.ImageUrl" Height="700" Class="w-100"/>
        <MudCardContent>
            <MudText Typo="Typo.body1">Tier: @_troop2.Tier</MudText>
            <MudText Typo="Typo.body1">Type: @_troop2.Type</MudText>
            <MudText Typo="Typo.body1">Culture: @_troop2.Culture</MudText>
            <MudText Typo="Typo.body1">Wage: @_troop2.Wage</MudText>
        </MudCardContent>
    </MudCard>
</MudStack>

@code {
    private Troop? _troop1 = new();
    private Troop? _troop2 = new();
    private Guid _id;

    protected override async Task OnInitializedAsync()
    {
        var tokenResult = await AccessTokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var token))
        {
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = state.User;
            var id = user.Claims.Single(claim => claim.Type == "sub");
            _id = Guid.Parse((ReadOnlySpan<char>)id.Value);
        }
    }

    private async Task<IEnumerable<Troop>?> Search(string name)
    {
        var troops = await HttpClient.GetFromJsonAsync<List<Troop>>($"Troops");
        var customTroops = await HttpClient.GetFromJsonAsync<CustomTroop[]>($"/CustomTroops/Search/AuthorId/{_id}") ?? Array.Empty<CustomTroop>();
        return troops.Concat(customTroops.Select(customTroop => customTroop.ToTroop()))
            .Where(troop => troop.Name.Contains(name ?? "", StringComparison.OrdinalIgnoreCase));
    }

    private Color GetColor(int value) => value switch{
        0 => Color.Default,
        > 0 => Color.Success,
        < 0 => Color.Error
        };

    private RenderFragment CalculateDifference(int value1, int value2) =>
        @<MudText Typo="Typo.subtitle1" Color="@GetColor(value1 - value2)">@(value1 - value2)</MudText>;

}
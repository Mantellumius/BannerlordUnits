@page "/Troops/CreateTroops"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient HttpClient
@inject IAccessTokenProvider AccessTokenProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@using FluentValidation

<MudCard Elevation="25">
    <MudForm Model="@model" @ref="@form" Validation="@(orderValidator.ValidateValue)" ValidationDelay="1">
        <MudCardContent>
            <MudTextField @bind-Value="model.Name"
                          For="@(() => model.Name)"
                          Immediate="true"
                          Label="Name"/>

            <MudNumericField @bind-Value="model.Tier"
                             For="@(() => model.Tier)"
                             Immediate="true"
                             Label="Tier"/>

            <MudTextField @bind-Value="model.Type"
                          For="@(() => model.Type)"
                          Immediate="true"
                          Label="Type"/>

            <MudTextField @bind-Value="model.Culture"
                          For="@(() => model.Culture)"
                          Immediate="true"
                          Label="Culture"/>

            <MudNumericField @bind-Value="model.Wage"
                             For="@(() => model.Wage)"
                             Immediate="true"
                             Label="Wage"/>

            <MudTextField @bind-Value="model.ImageUrl"
                          For="@(() => model.IconUrl)"
                          Immediate="true"
                          Label="ImageUrl"/>

            <MudTextField @bind-Value="model.IconUrl"
                          For="@(() => model.IconUrl)"
                          Immediate="true"
                          Label="ImageUrl"/>
            <MudGrid Justify="Justify.FlexStart">
                <MudItem xs="4">
                    <MudNumericField @bind-Value="model.OneHanded"
                                     For="@(() => model.OneHanded)"
                                     Immediate="true"
                                     Label="One Handed"/>
                </MudItem>
                <MudItem xs="4">
                    <MudNumericField @bind-Value="model.TwoHanded"
                                     For="@(() => model.TwoHanded)"
                                     Immediate="true"
                                     Label="Two Handed"/>
                </MudItem>
                <MudItem xs="4">
                    <MudNumericField @bind-Value="model.Polearm"
                                     For="@(() => model.Polearm)"
                                     Immediate="true"
                                     Label="Polearm"/>
                </MudItem>
                <MudItem xs="4">
                    <MudNumericField @bind-Value="model.Bow"
                                     For="@(() => model.Bow)"
                                     Immediate="true"
                                     Label="Bow"/>
                </MudItem>
                <MudItem xs="4">
                    <MudNumericField @bind-Value="model.Crossbow"
                                     For="@(() => model.Crossbow)"
                                     Immediate="true"
                                     Label="Crossbow"/>
                </MudItem>
                <MudItem xs="4">
                    <MudNumericField @bind-Value="model.Throwing"
                                     For="@(() => model.Throwing)"
                                     Immediate="true"
                                     Label="Throwing"/>
                </MudItem>
                <MudItem xs="4">
                    <MudNumericField @bind-Value="model.Riding"
                                     For="@(() => model.Riding)"
                                     Immediate="true"
                                     Label="Riding"/>
                </MudItem>
                <MudItem xs="4">
                    <MudNumericField @bind-Value="model.Athletics"
                                     For="@(() => model.Athletics)"
                                     Immediate="true"
                                     Label="Athletics"/>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Submit</MudButton>
    </MudCardActions>
</MudCard>

@code {
    private AccessToken? _token;

    protected override async Task OnInitializedAsync()
    {
        var tokenResult = await AccessTokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var token))
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
    }

    [Inject]
    ISnackbar Snackbar { get; set; } = null!;

    MudForm form;

    CustomTroopFluentValidator orderValidator = new CustomTroopFluentValidator();

    CustomTroop model = new CustomTroop();


    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            try
            {
                var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = state.User;
                var id = user.Claims.Single(claim => claim.Type == "sub");
                model.AuthorId = Guid.Parse((ReadOnlySpan<char>)id.Value);
                await HttpClient.PostAsJsonAsync<CustomTroop>("/CustomTroops", model);
                Snackbar.Add("Submited!");
            }
            catch (Exception e)
            {
                Snackbar.Add("Error!");
                throw;
            }
        }
    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="CustomTroop"></typeparam>
    public class CustomTroopFluentValidator : AbstractValidator<CustomTroop>
    {
        public CustomTroopFluentValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty()
                .Length(1, 100);

            RuleFor(x => x.Tier)
                .GreaterThanOrEqualTo(0);

            RuleFor(x => x.Type)
                .NotEmpty()
                .Length(1, 32);

            RuleFor(x => x.Culture)
                .NotEmpty()
                .Length(1, 100);

            RuleFor(x => x.Wage)
                .GreaterThanOrEqualTo(0);

            RuleFor(x => x.ImageUrl)
                .Length(0, 256);

            RuleFor(x => x.IconUrl)
                .Length(0, 256);

            RuleFor(x => x.OneHanded)
                .GreaterThanOrEqualTo(0);

            RuleFor(x => x.TwoHanded)
                .GreaterThanOrEqualTo(0);

            RuleFor(x => x.Polearm)
                .GreaterThanOrEqualTo(0);

            RuleFor(x => x.Bow)
                .GreaterThanOrEqualTo(0);

            RuleFor(x => x.Crossbow)
                .GreaterThanOrEqualTo(0);

            RuleFor(x => x.Throwing)
                .GreaterThanOrEqualTo(0);

            RuleFor(x => x.Riding)
                .GreaterThanOrEqualTo(0);

            RuleFor(x => x.Athletics)
                .GreaterThanOrEqualTo(0);
        }

        private async Task<bool> IsUniqueAsync(string email)
        {
    // Simulates a long running http call
            await Task.Delay(2000);
            return email.ToLower() != "test@test.com";
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<CustomTroop>.CreateWithOptions((CustomTroop)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

}
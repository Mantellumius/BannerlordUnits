@page "/Troops/Table"
@attribute [AllowAnonymous]
@inject HttpClient HttpClient
@inject IAccessTokenProvider AccessTokenProvider
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudContainer class="d-flex justify-center align-center">
    <MudTable Items="@_troops" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_isLoading" ReadOnly="true"
              LoadingProgressColor="Color.Info" Filter="new Func<Troop, bool>(FilterFunc)" Style="width: fit-content; margin: auto;">
        <ToolBarContent>
            <MudText Typo="Typo.h6" Color="Color.Primary">Troops</MudText>
            <MudSpacer/>
            <MudTextField @bind-Value="_searchString" Placeholder="Search"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Icon</MudTh>
            <MudTh Style="min-width: 200px">
                <MudTableSortLabel SortBy="new Func<Troop, object>(x => x.Name)">Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Troop, object>(x => x.Tier)">Tier</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Troop, object>(x => x.Type)">Type</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Troop, object>(x => x.Culture)">Culture</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Troop, object>(x => x.Wage)">Wage</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Troop, object>(x => x.OneHanded)">One Handed</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Troop, object>(x => x.TwoHanded)">Two Handed</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Troop, object>(x => x.Polearm)">Polearm</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Troop, object>(x => x.Bow)">Bow</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Troop, object>(x => x.Crossbow)">Crossbow</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Troop, object>(x => x.Throwing)">Throwing</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Troop, object>(x => x.Riding)">Riding</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Troop, object>(x => x.Athletics)">Athletics</MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Icon">
                <MudImage Src="@context.IconUrl" Width="60" Alt="no image" ObjectFit="ObjectFit.ScaleDown"/>
            </MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Tier">@context.Tier</MudTd>
            <MudTd DataLabel="Type">@context.Type</MudTd>
            <MudTd DataLabel="Culture">@context.Culture</MudTd>
            <MudTd DataLabel="Wage">@context.Wage</MudTd>
            <MudTd DataLabel="One Handed">@context.OneHanded</MudTd>
            <MudTd DataLabel="Two Handed">@context.TwoHanded</MudTd>
            <MudTd DataLabel="Polearm">@context.Polearm</MudTd>
            <MudTd DataLabel="Bow">@context.Bow</MudTd>
            <MudTd DataLabel="Crossbow">@context.Crossbow</MudTd>
            <MudTd DataLabel="Throwing">@context.Throwing</MudTd>
            <MudTd DataLabel="Riding">@context.Riding</MudTd>
            <MudTd DataLabel="Athletics">@context.Athletics</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new[] { 10, 25, 50, 100, int.MaxValue }" InfoFormat="@($"Center {_infoFormat}")" HorizontalAlignment="HorizontalAlignment.Center"/>
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    private string _searchString = "";
    private bool _isLoading = true;
    private readonly string _infoFormat = "{first_item}-{last_item} of {all_items}";
    private Troop[] _troops = { };
    private CustomTroop[] _customTroops = { };
    private Guid? _id;

    protected override async Task OnInitializedAsync()
    {
        var tokenResult = await AccessTokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var token))
        {
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = state.User;
            var id = user.Claims.Single(claim => claim.Type == "sub");
            _id = Guid.Parse((ReadOnlySpan<char>)id.Value);
        }
        _troops = await HttpClient.GetFromJsonAsync<Troop[]>("/Troops") ?? Array.Empty<Troop>();
        if (_id is not null)
        {
            _customTroops = await HttpClient.GetFromJsonAsync<CustomTroop[]>($"/CustomTroops/Search/AuthorId/{_id}") ?? Array.Empty<CustomTroop>();
            _troops = _troops.Concat(_customTroops.Select(customTroop => customTroop.ToTroop())).ToArray();
        }
        _isLoading = false;
    }

    private bool FilterFunc(ITroop troop) => string.IsNullOrWhiteSpace(_searchString) ||
                                             $"{troop.Name} {troop.Culture} {troop.Type} {troop.Tier}".ToLower().Contains(_searchString, StringComparison.OrdinalIgnoreCase);

}